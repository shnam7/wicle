//=========================================================
//
//  @package  Wicle Collection
//  @module   ui/components/button
//
//  @usage
//    <div class="w-button wo-compact"></div>
//
//=========================================================


//-----------------------------------------------
//  Config
//-----------------------------------------------
@mixin w-button-config {
    $key: 'w-button';

    // core
    @include ssv($key, 'margin', 0, true);
    @include ssv($key, 'padding', 0.25rem 1rem, true);
    @include ssv($key, 'line-height', 1.5, true);
    @include ssv($key, 'border', 'none', true);
    @include ssv($key, 'radius', $w-border-radius, true);
    @include ssv($key, 'transition', (all 0.15s), true);
    @include ssv($key, 'gradient', (level:20%, direction:bottom), true);

    // modifier: compact
    @include ssv($key, 'compact/font-size', 90%, true);
    @include ssv($key, 'compact/line-height', 1.75, true);
    @include ssv($key, 'compact/padding', 0 0.75rem, true);
    @include ssv($key, 'alpha', 0.75, true);
}


//-----------------------------------------------
//  Mixins
//-----------------------------------------------
@mixin w-button-core() {
    $key: 'w-button';

    display: inline-block; // this is required to vertical margin overlapping
    position: relative;
    box-sizing: border-box;
    white-space: nowrap;
    text-transform: none;
    vertical-align: middle;
    text-align: center; // align the text for the cases width is set
    text-decoration: none;

    margin: gsv($key, 'margin');
    padding: gsv($key, 'padding');
    line-height: gsv($key, line-height);

    border: gsv($key, 'border');
    border-radius: gsv($key, 'radius');
    transition: gsv($key, 'transition');

    &:not(:disabled) {
        cursor: pointer;
    }

    &:hover {
        text-decoration: none;
    }
}

@mixin w-button-modifiers-compact {
    $key: 'w-button';

    &.wo-compact {
        font-size: gsv($key, 'compact/font-size');
        padding: gsv($key, 'compact/padding');
        line-height: gsv($key, 'compact/line-height');
    }
}

@mixin w-button-styles($color, $alpha:false) {
    $key: 'w-button';

    $fg: yiq-color($color);
    $bg: $color;
    $gr: gsv($key, 'gradient');
    $line-color: transparentize($color, 0.7);
    $hover: darken($bg, 10%);

    border-color: $line-color;

    @if $alpha {
        $fg: darken(saturate($color, 15%), 15%);
        $bg: transparentize($fg, gsv($key, 'alpha'));
        $hover: opacify($bg, 0.1);
    }

    &,
    a {
        color: $fg;
    }

    background: if($gr, gradient($bg, gcv($gr, level), gcv($gr, direction)), $bg);

    @if $gr {
        // create a background layer with :after property for gradient animation
        // this is a workaround for gradient not supporting transition
        // this background layer will reveal on hover
        z-index: 1;

        &:after {
            position: absolute;
            content: '';
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border-radius: gsv($key, radius);
            background: gradient($hover, gcv($gr, level), gcv($gr, direction));
            transition: gsv($key, transition);
            z-index: -1;    // set layer below the button
            opacity: 0;
        }

        &:hover {
            &:after {
                opacity: 1;
            }
        }

    }

    @else {
        // background: $bg;
        &:hover {
            background: $hover;
        }
    }
}

//
//  Generate Button styles for color selections
//  @param {Map} [$color-scheme=null] - Set of $color-schemes. If null, $w-color-scheme is used
//
@mixin w-button-modifier-color-scheme($color-scheme:null) {
    .w-button {

        // default color style is generated by default. So, no need to grnerate again.
        // @include w-button-styles($w-color-text-black);
        &.wo-alpha {
            @include w-button-styles($w-color-text-black, true);
        }

        $color-scheme: if($color-scheme, $color-scheme, $w-color-scheme);

        @each $scheme in $w-color-scheme {
            $name: nth($scheme, 1);
            $color: nth($scheme, 2);

            &.wo-#{$name} {
                @include w-button-styles($color);

                // alpha mode (semi transparent)
                &.wo-alpha {
                    @include w-button-styles($color, true);
                }
            }
        }
    }
}

@mixin w-button-default-styles {
    @include w-button-styles($w-color-text-black);
}


//-----------------------------------------------
//  Elements
//-----------------------------------------------
@include w-button-config();

.w-button {
    @include w-button-core();
    @include w-button-modifiers-compact();
    @include w-button-default-styles();
}
