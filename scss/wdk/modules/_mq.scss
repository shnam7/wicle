//=========================================================
//
//  @package Wicle
//  @module mixins/mq
//  @description media query
//
//=========================================================

@import "../functions/unit";

//-----------------------------------------------
//  internal functions
//-----------------------------------------------

//
//  Converts breakpoint list into mq-set (media query)
//    @param  {Map}   [$breakpoints]  Array of breakpoints
//    @return {Map}   The media query string without the @media
//
//  Example #1
//    $breakpoints: (small: 300px)
//    @return: (computer: "(min-width:960px)")
//
//  Example #1
//    $breakpoints: (mobile:0, computer:960px)
//    @return: (
//      mobile:   "(max-width:959px)",
//      computer: "(min-width:960px)")
//
//  Example #3
//    $breakpoints: (small:0, medium: 768px, large: 960px)
//    @return: (
//      small:   "(max-width:767px)",
//      medium:  "(min-width:768px)",
//      medium-only: "(min-width:768px) and (max-width:959px)",
//      medium-down: "(max-width:960px)",
//      large: "(min-width:960px)"
//    )
//
@function __mq-set-of($breakpoints) {
  $result: ();
  $keys: map-keys($breakpoints);
  $length: length($keys);
  @if $length >= 2 {
    $min: map-get($breakpoints, nth($keys, 1));
    @if strip-unit($min) != 0 {
      @error 'First element of the breakpoint list should have zero value';
    }

    $name: nth($keys, 1);
    $max: map-get($breakpoints, nth($keys, 2));
    $result: ($name: '(max-width:' + ($max - 1) + ')');
    @for $i from 2 to $length {
      $name: nth($keys, $i);
      $min: $max;
      $max: map-get($breakpoints, nth($keys, $i+1));
      $result: map-merge($result, ($name: '(min-width:' + $min + ')'));
      $result: map-merge($result, ($name+'-only': '(min-width:' + $min + ') and (max-width:' + ($max - 1) + ')'));
      $result: map-merge($result, ($name+'-down': '(max-width:' + $max + ')'));
    }
    $name: nth($keys, $length);
    $max: map-get($breakpoints, nth($keys, $length));
    $result: map-merge($result, ($name: '(min-width:' + $max + ')'));
  }
  @else if $length == 1 {
    $name: nth($keys, 1);
    $val: map-get($breakpoints, nth($keys, 1));
    @if $val > 0 {
      $result: map-merge($result, ($name: '(min-width:' + $val + ')'));
      //$result: map-merge($result, ($name+'-down': '(max-width:' + ($val - 1) + ')'));
    }
  }
  @return $result;
}

//
//  Checks if $name is in mq-set
//    @param {string}     $name   Name of media query string
//    @return {boolean}   true if $name is in mq-set
//
@function __mq-invalid($name) {
  @return not contains(map-keys($w-mq-set), $name);
}



//-----------------------------------------------
//  data
//-----------------------------------------------
$w-breakpoints-foundation: (
  // screen based states (foundation-site compatible)
        mini:                   0,
        small:                  320px,    // foundation-site small    : 320~
        medium:                 640px,    // foundation-site medium   : 640~
        large:                  1024px,   // foundation-site large    : 1024~
        xlarge:                 1200px,   // foundation-site xlarge   : 1200~
        xxlarge:                1440px,   // foundation-site xxlarge  : 1440~
) !default;

$w-breakpoints-semantic-ui: (
  // device based states (semantic-ui compatible)
        mini:                   0,
        phone:                  320px,    // semantic-ui mobile   : 320px~ (20em~)
        tablet:                 768px,    // semantic-ui tablet   : 768px~ (48em~)
        computer:               992px,    // semantic-ui computer : 992px~ (62em~ )
        largeMonitor:           1200px,   // semantic-ui largeMonitor : 1200px~ (75em~ )
        wideMonitor:            1920px,   // semantic-ui wideMonitor  : 1920px~ (120em~ )
) !default;

$w-breakpoints-uikit: (
  // generic states (UIKit compatible)
        mini:                   0,         // mini: 0~479 (phone portrait)
        small:                  480px,     // uikit small(phone landscape):     480~
        medium:                 768px,     // uikit medium(tablet portrait):    768~
        large:                  960px,     // uikit large(desktop and tablet landscape):  960~
        xlarge:                 1220px,    // uikit large(large desktop):       1220~
) !default;

$w-breakpoints-bootstrap: (
  // generic states (Bootstrap compatible)
        xs:                     0,         // extra small:  0~575
        sm:                     576px,     // small:        480~
        md:                     768px,     // medium:       768~
        lg:                     992px,     // large:        992~
        xl:                     1200px,    // extra large:  1200~
) !default;

$w-breakpoints-simple: (
        mobile:                 0,
        computer:               960px,
) !default;

$w-breakpoints-basic: (
        small:                  0,
        medium:                 768px,
        large:                  960px
) !default;


//--- postcss variables
$w-wicle-postcss:               false !default;

@if $w-wicle-postcss {

  // media queries (postcss-cssnext)
  @custom-media --mini        (width<480px);
  @custom-media --small       (width>=480px);
  @custom-media --medium      (width>=768px);
  @custom-media --large       (width>=960px);
  @custom-media --xlarge      (width>=1220px);

  @custom-media --small-down  (width<768px);
  @custom-media --small-only  (480px <= width < 768px); // <=480px(width>=480px) and (width<768px);
  @custom-media --medium-only (768px <= width <960px);
  @custom-media --large-only  (960px <=width < 1220px);

}

$w-mq-set:                      __mq-set-of($w-breakpoints-uikit) !default;



//-----------------------------------------------
//  functions
//-----------------------------------------------

//
//  Returns currently active mq-set
//
@function w-mq-set() {
  @return $w-mq-set;
}

//
//  Returns the list of media query names of current mq-set
//
@function w-mq-list() {
  @return map-keys($w-mq-set);
}



//-----------------------------------------------
//  mixin's
//-----------------------------------------------

//
//  Init media query with breakpoint list
//    @param {Map}    $breakpoints  List of breakpoints
//
@mixin w-mq-init($breakpoints:$w-breakpoints-basic) {
  $w-mq-set: __mq-set-of($breakpoints) !global;
}

//
//  Select media state
//    @param {string}   $name       Name of media state
//    @param {string}   $mediaType  Media type
//
@mixin w-mq($name, $mediaType:screen) {
  @if __mq-invalid($name) {
    @warn 'Wicle:mq: #{$name} is not in media-query list.';
    @warn 'Wicle:mq: mq-set: #{$w-mq-set}';
  }
  @media #{$mediaType + " and " + map-get($w-mq-set, $name)}  {
    @content;
  }
}
