//=========================================================
//
//  @package Wicle
//  @module functions/map
//
//  @ref: https://css-tricks.com/snippets/sass/deep-getset-maps/
//        http://www.sassmeister.com/gist/7525f0546479acd1d6e1
//
//=========================================================

@function map-set($map, $key, $value) {
  @return map-merge($map, ($key: $value));
}

//
//  Map deep get
//    @param {Map} $map - Map
//    @param {Arglist} $keys - Key chain (list type)
//    @return {*} - Desired value, null if key is not found
//
@function map-deep-get($map, $keys) {
  @each $key in $keys {
    @if (type-of($map) != map) { @return null; }
    $map: map-get($map, $key);
  }
  @return $map;
}

//
//  Deep set function to set a value in nested maps
//    @param {Map} $map - Map
//    @param {List} $keys -  Key chaine
//    @param {*} $value - Value to assign
//    @return {Map}
//
@function map-deep-set($map, $keys, $value) {
  $maps: ($map,);
  $result: null;

  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == "map" {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }

  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    $keys: if(type-of($keys)==list, nth($keys,1), $keys);
    @return map-merge($map, ($keys: $value));
  }

  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      //@error "Key `#{$current-key}` doesn't exist at current level in map.";
      // create key rather than stop with error
      $current-get:();
    }
    $maps: append($maps, $current-get);
  }

  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }

  // Return result
  @return $result;
}

//
//  jQuery-style extend function
//  About `map-merge()`:
//    * only takes 2 arguments
//    * is not recursive
//    @param {Map} $object - first map
//    @param {ArgList} $objects - other maps
//    @param {Bool} $deep - recursive mode
//    @return {Map}
//
//  Eexamples:
//    extend-standard  : extend($map-1, $map-2, $map-3);
//    extend-recursive : extend($map-1, $map-2, $map-3, true);
//
@function map-extend($object, $objects.../*, $deep */) {
  $last: nth($objects, -1);
  $deep: $last == true;
  $max: if($deep, length($objects) - 1, length($objects));
  $object: if($object==null, (), $object);

  // Loop through all maps in $objects...
  @for $i from 1 through $max {
    // Store current map
    $current: nth($objects, $i);
    @if $current != null {
      // If not in deep mode, simply merge current map with object
      @if not $deep {
        $object: map-merge($object, $current);
      }

        // If in deep mode
      @else {
        // Loop through all tuples in current map
        @each $key, $value in $current {
          // If value is a nested map and same key from object is a nested map as well
          @if type-of($value) == "map" and type-of(map-get($object, $key)) == "map" {
            // Recursive extend
            $value: extend(map-get($object, $key), $value, true);
          }
          // Merge current tuple with object
          $object: map-merge($object, ($key: $value));
        }
      }
    }
  }
  @return $object;
}

//
//  $map: ('a':123, null:'null','b':('1':null,'2':2), 'c':null);
//  map-trim($map) --> ("a": 123, null: "null", "b": ("1": null, "2": 2)) // 'c' key removed
//  map-trim($map, true) --> ("a": 123, "b": ("1": null, "2": 2)) // null key removed
//  map-trim($map, true);
//  map-trim($map, true, true, true) --> ("a": 123, "b": ("2": 2))
//
@function map-trim($map, $trim-keys:false, $trim-values:true, $recursive:false) {
  @if ($trim-keys) {  $map: map-remove($map, null); }
  @if ($trim-values) {
    $keys: map-keys($map);
    @each $key in $keys {
      $val: map-get($map, $key);
      //@debug 'map:' $key, map-get($map, $key);
      @if ($val==null) {
        $map: map-remove($map, $key);
      }
      @else if ($recursive and type-of($val)==map) {
        $map: map-merge($map, ($key:map-trim($val, $trim-keys, $trim-values, $recursive)));
      }
    }
    @return $map;
  }
}

//  Test
//  .aaa {
//    $map: ('a':123, null:'null','b':('1':null,'2':2), 'c':null);
//    @debug 'TRIM' map-trim($map);
//    @debug 'TRIM' map-trim($map, true);
//    @debug 'TRIM' map-trim($map, true, true, true);
//  }
//
