//=========================================================
//
//  @package Wicle
//  @module mixins/util
//
//=========================================================

//
//  Source: foundation-site (http://foundation.zurb.com/)
//  Creates a CSS triangle, which can be used for dropdown arrows, etc.
//  Use this mixin inside a `&::before` or `&::after` selector, to attach the triangle to an existing element.
//
//  @param $triangle-size{Number} - Width of the triangle.
//  @param $triangle-color{Color} - Color of the triangle.
//  @param $triangle-direction{Keyword} - Direction the triangle points. Can be `up`, `right`, `down`, or `left`.
//
@mixin w-triangle(
  $triangle-size,
  $triangle-color,
  $triangle-direction
) {
  content: '';
  display: block;
  width: 0;
  height: 0;
  border: inset $triangle-size;

  @if ($triangle-direction == down) {
    border-color: $triangle-color transparent transparent;
    border-top-style: solid;
    border-bottom-width: 0;
  }
  @if ($triangle-direction == up) {
    border-color: transparent transparent $triangle-color;
    border-bottom-style: solid;
    border-top-width: 0;
  }
  @if ($triangle-direction == right) {
    border-color: transparent transparent transparent $triangle-color;
    border-left-style: solid;
    border-right-width: 0;
  }
  @if ($triangle-direction == left) {
    border-color: transparent $triangle-color transparent transparent;
    border-right-style: solid;
    border-left-width: 0;
  }
}

//
//  Source: foundation-site (http://foundation.zurb.com/)
//  Creates a menu icon with a set of width, height, number of bars, and colors.
//  The mixin uses the height of the icon and the weight of the bars to determine spacing.
//
//  @param $color{Color} - Color to use for the icon.
//  @param $color-hover{Color} - Color to use when the icon is hovered over.
//  @param $width{Number} - Width of the icon.
//  @param $height{Number} - Height of the icon.
//  @param $weight{Number} - Height of individual bars in the icon.
//  @param $bars{Number}- Number of bars in the icon.
//
@mixin w-hamburger(
  $color: $w-color-text-white,
  $color-hover: null,
  $width: 18px,
  $height: 14px,
  $weight: 2px,
  $bars: 3
) {
  $color-hover: if($color-hover, $color-hover, smart-scale($color, 15%));

  // box-shadow CSS output
  $shadow: ();
  $hover-shadow: ();

  // Spacing between bars is calculated based on the total height of the icon and the weight of each bar
  $spacing: floor(($height - ($weight * $bars)) / ($bars - 1));

  //Icon container
  position: relative;
  //display: inline-block;
  vertical-align: middle;
  cursor: pointer;
  width: $width;
  height: $height;

  // Icon bars
  &::after {
    content: '';
    position: absolute;
    display: block;
    width: 100%;
    height: $weight;
    background: $color;
    top: 0;
    left: 0;

    @for $i from 2 through $bars {
      $offset: ($weight + $spacing) * ($i - 1);
      $shadow: append($shadow, 0 $offset 0 $color, comma);
    }

    box-shadow: $shadow;
  }

  // Hover state
  @if $color-hover {
    // Generate CSS
    @for $i from 2 through $bars {
      $offset: ($weight + $spacing) * ($i - 1);
      $hover-shadow: append($hover-shadow, 0 $offset 0 $color-hover, comma);
    }

    &:hover::after {
      background: $color-hover;
      box-shadow: $hover-shadow;
    }
  }
}

//
//  Ref: https://ismamz.github.io/postcss-utilities/docs#clear-fix
//  Ref: http://nicolasgallagher.com/micro-clearfix-hack/
//
@mixin w-clearfix($ie8:false) {
  @if $ie8 {
    &:before,
    &:after {
      display: table;
      content: ' ';
    }
    &:after {
      clear: both;
    }
    // IE6 and IE7 support is removed
    //zoom: 1; // For IE 6/7 (trigger hasLayout)
  }
  @else {
    &:after {
      content: '';
      display: block;
      clear: both;
    }
  }
}

//
//  Set Borders
//
//  Examples
//    w-border() or w-birder($where:all)
//    w-border(red, 1px, solid, (left, right))
//
@mixin w-border($color:red, $width:1px, $style:solid, $where:null) {
  @if $where==null or $where==all {
    border: $width $style $color;
  }
  @else if $where==left or $where==top or $where==right or $where==bottom {
    border-#{$where}: $width $style $color;
  }
  @else if type-of($where)==list {
    @each $side in $where {
      border-#{$side}: $width $style $color;
    }
  }
}

//
//  Set border colors
//
//  Examples
//    w-border-color(red)
//    w-border-color(red, (left, right))
//
@mixin w-border-color($color, $where:null) {
  @if $where==null or $where==all {
    border-color: $color;
  }
  @else if $where==left or $where==top or $where==right or $where==bottom {
    border-#{$where}-color: $color;
  }
  @else if type-of($where)==list {
    @each $side in $where {
      border-#{$side}-color: $color;
    }
  }
}

//
//  Set border radius
//
//  Examples
//    w-border-radius(1px)
//    w-border-radius(1px, (left, right))
//
@mixin w-border-radius($radius, $where:null) {
  @if $where==null or $where==all {
    border-radius: $radius;
  }
  @else if $where==left or $where==right {
    border-top-#{$where}-radius: $radius;
    border-bottom-#{$where}-radius: $radius;
  }
  @else if $where==top or $where==bottom {
    border-#{$where}-left-radius: $radius;
    border-#{$where}-right-radius: $radius;
  }
}

//
// Sets border styles
//
//  Examples
//    w-border-style(solid)
//    w-border-style(solid, (left, right))
//
@mixin w-border-style($style, $where:null) {
  @if $where==null or $where==all {
    border-style: $style;
  }
  @else if $where==left or $where==top or $where==right or $where==bottom {
    border-#{$where}-style: $style;
  }
  @else if type-of($where)==list {
    @each $side in $where {
      border-#{$side}-style: $style;
    }
  }
}

//
//  Replaces $sel with the value defined in $selector-map
//    @param $selector{String}    Selector to be replaced
//    @param $selector-map{Map}   Selector mapping table
//
//  Example
//    $selector-map: ('{item}':'&>li' );
//    @include w-on('{item}', $selector-map, $target:'ul') {
//      color:red;
//    }
//    Output: ul>li {color:red}
//
@mixin w-on($selector:'&', $selector-map:(), $target:null) {
  @if $target {
    #{$target} {
      #{str-replace-batch($selector, $selector-map)} {
        @content;
      }
    }
  }
  @else {
    #{str-replace-batch($selector, $selector-map)} {
      @content;
    }
  }
}
